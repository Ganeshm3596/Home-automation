{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red42\green49\blue64;\red245\green245\blue246;\red14\green18\blue29;
}
{\*\expandedcolortbl;;\cssrgb\c21569\c25490\c31765;\cssrgb\c96863\c96863\c97255;\cssrgb\c6667\c9412\c15294;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
n this code, we use Flask to create a web server that listens to incoming requests on port 5000. We define two routes 
\f1\fs28 \cf4 \cb3 /light
\f0\fs32 \cf2 \cb3  and 
\f1\fs28 \cf4 \cb3 /appliance
\f0\fs32 \cf2 \cb3  that handle the requests for controlling lights and appliances respectively.\cb1 \
\cb3 When a request is made to turn on or off a light or an appliance, the corresponding GPIO pin is set to HIGH or LOW respectively. The status of the device is sent to the server using a POST request from the web interface.\cb1 \
\cb3 To use this code, you will need to create an HTML template for the web interface that sends the appropriate requests to the server when buttons are clicked.}